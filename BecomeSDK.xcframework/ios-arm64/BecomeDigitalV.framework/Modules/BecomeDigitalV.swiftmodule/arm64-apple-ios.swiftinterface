// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BecomeDigitalV
import AVFoundation
import Alamofire
@_exported import BecomeDigitalV
import Foundation
import ImageIO
import Microblink
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String, bundle: Foundation.Bundle)
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String, bundle: Foundation.Bundle) -> UIKit.UIImage?
}
@objc public protocol BDIVDelegate {
  @objc func BDIVResponseSuccess(bdivResult: Swift.AnyObject)
  @objc func BDIVResponseError(error: Swift.String)
}
public struct ResponseIV {
  public init(firstName: Swift.String = "", lastName: Swift.String = "", documentNumber: Swift.String = "", dateOfExpiry: Foundation.Date = Date(), dateOfIssue: Foundation.Date = Date(), age: Swift.Int = 0, dateOfBirth: Foundation.Date = Date(), placeOfBirth: Swift.String = "", mrzText: Swift.String = "", sex: Swift.String = "", barcodeResult: Swift.String = "", barcodeResultData: Foundation.Data = Data(), isoAlpha2CountryCode: Swift.String = "", isoAlpha3CountryCode: Swift.String = "", isoNumericCountryCode: Swift.String = "", type: Microblink.MBType = .typeId, countryName: Swift.String = "", faceImage: UIKit.UIImage = UIImage(), frontImage: UIKit.UIImage = UIImage(), backImage: UIKit.UIImage = UIImage(), fullFronImage: UIKit.UIImage = UIImage(), fullBackImage: UIKit.UIImage = UIImage(), message: Swift.String = "", documentValidation: [Swift.String : Any] = [:], registryInformation: [Swift.String : Any] = [:], responseStatus: BecomeDigitalV.ResponseIV.typeEstatus = .PENDING, ItFirstTransaction: Swift.Bool = true)
  public enum typeEstatus {
    case SUCCES
    case ERROR
    case PENDING
    case NOFOUND
    public static func == (a: BecomeDigitalV.ResponseIV.typeEstatus, b: BecomeDigitalV.ResponseIV.typeEstatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var firstName: Swift.String
  public var lastName: Swift.String
  public var documentNumber: Swift.String
  public var dateOfIssue: Foundation.Date
  public var dateOfExpiry: Foundation.Date
  public var age: Swift.Int
  public var dateOfBirth: Foundation.Date
  public var placeOfBirth: Swift.String
  public var mrzText: Swift.String
  public var sex: Swift.String
  public var barcodeResult: Swift.String
  public var barcodeResultData: Foundation.Data
  public var isoAlpha2CountryCode: Swift.String
  public var isoAlpha3CountryCode: Swift.String
  public var isoNumericCountryCode: Swift.String
  public var type: Microblink.MBType
  public var countryName: Swift.String
  public var faceImage: UIKit.UIImage?
  public var frontImage: UIKit.UIImage?
  public var backImage: UIKit.UIImage?
  public var fullFronImage: UIKit.UIImage?
  public var fullBackImage: UIKit.UIImage?
  public var message: Swift.String
  public var documentValidation: [Swift.String : Any]
  public var registryInformation: [Swift.String : Any]
  public var responseStatus: BecomeDigitalV.ResponseIV.typeEstatus
  public var IsFirstTransaction: Swift.Bool
}
public struct BDIVConfig {
  public init(ItFirstTransaction: Swift.Bool = true, token: Swift.String, contractId: Swift.String, userId: Swift.String, documentNumber: Swift.String = "", isoAlpha2CountryCode: Swift.String = "", type: Swift.Int = 0, imgDataFullFront: Foundation.Data = Data(), imgDataCroppetBack: Foundation.Data = Data(), barcodeResultData: Swift.String = "", customLocalizationFileName: Swift.String = "")
  public let IsFirstTransaction: Swift.Bool
  public var token: Swift.String
  public let contractId: Swift.String
  public let userId: Swift.String
  public let documentNumber: Swift.String
  public let isoAlpha2CountryCode: Swift.String
  public let type: Swift.Int
  public let imgDataFullFront: Foundation.Data
  public let imgDataCroppetBack: Foundation.Data
  public let barcodeResultData: Swift.String
  public let customLocalizationFileName: Swift.String
}
@_hasMissingDesignatedInitializers public class BDIVCallBack {
  public class var sharedInstance: BecomeDigitalV.BDIVCallBack {
    get
  }
  weak public var delegate: BecomeDigitalV.BDIVDelegate?
  public func register(bdivConfig: BecomeDigitalV.BDIVConfig)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MainViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) public var bdivConfig: BecomeDigitalV.BDIVConfig?
  @_Concurrency.MainActor(unsafe) public var delegate: BecomeDigitalV.BDIVDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension BecomeDigitalV.MainViewController : Microblink.MBBlinkIdOverlayViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blinkIdOverlayViewControllerDidFinishScanning(_ blinkIdOverlayViewController: Microblink.MBBlinkIdOverlayViewController, state: Microblink.MBRecognizerResultState)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func blinkIdOverlayViewControllerDidTapClose(_ blinkIdOverlayViewController: Microblink.MBBlinkIdOverlayViewController)
}
extension BecomeDigitalV.ResponseIV.typeEstatus : Swift.Equatable {}
extension BecomeDigitalV.ResponseIV.typeEstatus : Swift.Hashable {}
